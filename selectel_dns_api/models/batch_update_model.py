# coding: utf-8

"""
    Selectel DNS API

    Simple Selectel DNS API.

    OpenAPI spec version: 1.0.0
    Contact: info@mdsina.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BatchUpdateModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete': 'list[Record]',
        'update': 'list[Record]',
        'create': 'list[Record]'
    }

    attribute_map = {
        'delete': 'delete',
        'update': 'update',
        'create': 'create'
    }

    def __init__(self, delete=None, update=None, create=None):
        """
        BatchUpdateModel - a model defined in Swagger
        """

        self._delete = None
        self._update = None
        self._create = None

        if delete is not None:
          self.delete = delete
        if update is not None:
          self.update = update
        if create is not None:
          self.create = create

    @property
    def delete(self):
        """
        Gets the delete of this BatchUpdateModel.

        :return: The delete of this BatchUpdateModel.
        :rtype: list[Record]
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """
        Sets the delete of this BatchUpdateModel.

        :param delete: The delete of this BatchUpdateModel.
        :type: list[Record]
        """

        self._delete = delete

    @property
    def update(self):
        """
        Gets the update of this BatchUpdateModel.

        :return: The update of this BatchUpdateModel.
        :rtype: list[Record]
        """
        return self._update

    @update.setter
    def update(self, update):
        """
        Sets the update of this BatchUpdateModel.

        :param update: The update of this BatchUpdateModel.
        :type: list[Record]
        """

        self._update = update

    @property
    def create(self):
        """
        Gets the create of this BatchUpdateModel.

        :return: The create of this BatchUpdateModel.
        :rtype: list[Record]
        """
        return self._create

    @create.setter
    def create(self, create):
        """
        Sets the create of this BatchUpdateModel.

        :param create: The create of this BatchUpdateModel.
        :type: list[Record]
        """

        self._create = create

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BatchUpdateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
